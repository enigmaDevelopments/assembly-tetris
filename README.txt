I recreated Tetris in assembly language. The program creates a random number between 0-6 (each number can be used only once per set of 7 numbers) and then uses an array to determine the positions of each part of the tetromino in relation to the  saved player position and then render it to the board. The program reads clock cycles to run a timer to see when blocks should be automatically dropped (it also uses this information as the seed for the random number generator), blocking mode is disabled, in order to allow the timer to be continuously run, the player input is only run if a keypress has been detected. Instead of checking collation at a signal point, it is checked at the position of each block; what happens upon a collation depends on the type of movement. If there is sideways movement, the last position is simply loaded. If there is a rotational movement the main player x position is shifted in an attempt to find a spot in which the rotation will work, otherwise the position and rotation is set back to the saved position. If there is downwards movement the tetromino is saved to the bord array and a new one is spawned at the starting position, from there the bored is checked to see if a row is filled up, if it is all rows are shifted down one and the top row is replaced with an empty one, points are added to the total based on rows cleared.
